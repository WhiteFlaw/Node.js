TCP服务的事件

服务器事件
在上述的示例中，代码分为服务器事件和连接事件。

1.服务器事件

对于通过createServer()创建的服务器而言，它是一个EventEmitter实例， 它的自定义事件有如下几种。

listening: 在调用server .listen( )绑定端口或者Domain Socket后 触发，简洁写法为server .listen(port,listeningListener),通过listen()方法的第二个参数传入。

connection: 建立新的 TCP 流时会触发此事件。 socket 通常是 net.Socket 类型的对象
/每个客户端套接字连接到服务器端时触发，简洁写法为通过net.createServer(),最后一个参数传递。

close: 当服务器关闭时触发，在调用server .close()后，服务器将停止接受新的套接字连接，但保持当前存在的连接，等待所有连接都断开后，会触发该事件。

error: 当服务器发生异常时，将会触发该事件。比如侦听一个使用中的端口，将会触发一个异常，如果不侦听error事件，服务器将会直接抛出异常。

______________________________________________________________________

2.连接事件

服务器可以同时与多个客户端保持连接，对于每个连接而言是典型的可写可读Stream(流)对象。Stream(流)对象可以用于服务器端和客户端之间的通信，既可以通过ta事件从一端读取另一端发来的数据，也可以通过write()方法从一端向另一端发送数据。它具有如下自定义事件。

data:每当流将数据块的所有权移交给消费者时，则会触发 'data' 事件.每当通过调用 readable.pipe()、readable.resume()、或通过将监听器回调绑定到 'data' 事件而将流切换到流动模式时，就会发生这种情况。 每当调用 readable.read() 方法并且可以返回数据块时，也会触发 'data' 事件.
/当一端调用write()发送数据时，另一端会触发data事件，事件传递的数据即是write()发送的数据。

end:当套接字的另一端表示传输结束时触发，从而结束套接字的可读端。
/当连接中的任意一端发送了FIN数据时，将会触发该事件。

connect:每次服务器使用 CONNECT 方法响应请求时触发。 如果未监听此事件，则接收 CONNECT 方法的客户端将关闭其连接。
/该事件用于客户端，当套接字与服务器端连接成功时会被触发。

drain:如果对 stream.write(chunk) 的调用返回 false，则 'drain' 事件将在适合继续将数据写入流时触发。
/当任意一端调用write()发送数据时，当前这端会触发该事件。

error:当异常发生时，触发该事件。

close:rl.close() 方法被调用，readline.Interface 实例放弃了对 input 和 output 流的控制；
input 流接收到它的 'end' 事件；
input 流接收 Ctrl+D 以发出传输结束（EOT）的信号；
input 流接收 Ctrl+C 以发出 SIGINT 信号，并且在 readline.Interface 实例上没有注册 'SIGINT' 事件监听器。
/当套接字完全关闭时，触发该事件。

timeout:当一定时间后连接不再活跃时，该事件将会被触发，通知用户当前该连接已经被闲置了。